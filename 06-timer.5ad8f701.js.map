{"version":3,"sources":["js/06-timer.js"],"names":["refs","clockface","document","querySelector","openBtn","closeBtn","Timer","onTick","intervalId","isActive","init","time","getTimeComponents","startTime","Date","now","setInterval","currentTime","deltaTime","clearInterval","hours","pad","Math","floor","mins","secs","value","String","padStart","timer","updateClockface","textContent","addEventListener","start","stop"],"mappings":";;;AAkFC,aAAA,SAAA,EAAA,EAAA,GAAA,KAAA,aAAA,GAAA,MAAA,IAAA,UAAA,qCAAA,SAAA,EAAA,EAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAA,CAAA,IAAA,EAAA,EAAA,GAAA,EAAA,WAAA,EAAA,aAAA,EAAA,EAAA,cAAA,EAAA,UAAA,IAAA,EAAA,UAAA,GAAA,OAAA,eAAA,EAAA,EAAA,IAAA,IAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,GAAA,EAAA,EAAA,UAAA,GAAA,GAAA,EAAA,EAAA,GAAA,EAlFD,QAAA,qBAEA,IAAMA,EAAO,CACTC,UAAWC,SAASC,cAAc,iBAClCC,QAASF,SAASC,cAAc,6BAChCE,SAAUH,SAASC,cAAc,6BAG/BG,EAAAA,WACoB,SAAA,EAAA,GAATC,IAAAA,EAAAA,EAAAA,OAAS,EAAA,KAAA,GACbC,KAAAA,WAAa,KACbC,KAAAA,UAAW,EACXF,KAAAA,OAASA,EACTG,KAAAA,OAqEZ,OAAA,EAAA,EAAA,CAAA,CAAA,IAAA,OAlEU,MAAA,WACGC,IAAAA,EAAO,KAAKC,kBAAkB,GAC/BL,KAAAA,OAAOI,KAgEnB,CAAA,IAAA,QA7DW,MAAA,WAAA,IAAA,EAAA,KACA,IAAA,KAAKF,SAAL,CAIEI,IAAAA,EAAYC,KAAKC,MAClBN,KAAAA,UAAW,EAEXD,KAAAA,WAAaQ,YAAY,WACpBC,IACAC,EADcJ,KAAKC,MACOF,EAC1BF,EAAO,EAAKC,kBAAkBM,GACpC,EAAKX,OAAOI,IAEb,QA+CV,CAAA,IAAA,OA5CU,MAAA,WACHQ,cAAc,KAAKX,YACdC,KAAAA,UAAW,EACVE,IAAAA,EAAO,KAAKC,kBAAkB,GAC/BL,KAAAA,OAAOI,KAwCnB,CAAA,IAAA,oBA9BqBA,MAAAA,SAAAA,GAKX,MAAA,CAAES,MAJK,KAAKC,IAAIC,KAAKC,MAAOZ,EAAQ,MAAyB,OAIpDa,KAHH,KAAKH,IAAIC,KAAKC,MAAOZ,EAAQ,KAAoB,MAGxCc,KAFT,KAAKJ,IAAIC,KAAKC,MAAOZ,EAAQ,IAAc,SA2B3D,CAAA,IAAA,MAnBOe,MAAAA,SAAAA,GACGC,OAAAA,OAAOD,GAAOE,SAAS,EAAG,SAkBpC,EA1EKtB,GA4DAuB,EAAQ,IAAIvB,EAAM,CACpBC,OAAQuB,IAWZ,SAASA,EAAuC,GAArBV,IAAAA,EAAAA,EAAAA,MAAOI,EAAAA,EAAAA,KAAMC,EAAAA,EAAAA,KACpCzB,EAAKC,UAAU8B,YAAiBX,GAAAA,OAAAA,EAASI,KAAAA,OAAAA,EAAQC,KAAAA,OAAAA,GATrDzB,EAAKI,QAAQ4B,iBAAiB,QAAS,WACnCH,EAAMI,UAGVjC,EAAKK,SAAS2B,iBAAiB,QAAS,WACpCH,EAAMK","file":"06-timer.5ad8f701.js","sourceRoot":"..\\src","sourcesContent":["import '../css/styles.css';\r\n\r\nconst refs = {\r\n    clockface: document.querySelector('.js-clockface'),\r\n    openBtn: document.querySelector('button[data-action-start]'),\r\n    closeBtn: document.querySelector('button[data-action-stop]'),\r\n}\r\n\r\nclass Timer {\r\n    constructor({onTick}) {\r\n        this.intervalId = null;\r\n        this.isActive = false;\r\n        this.onTick = onTick;\r\n        this.init();\r\n    }\r\n\r\n    init() {\r\n        const time = this.getTimeComponents(0);\r\n        this.onTick(time);\r\n    }\r\n\r\n    start() {\r\n        if (this.isActive) {\r\n            return;\r\n        }\r\n\r\n        const startTime = Date.now();\r\n        this.isActive = true;\r\n\r\n        this.intervalId = setInterval(() => {\r\n            const currentTime = Date.now();\r\n            const deltaTime = currentTime - startTime;\r\n            const time = this.getTimeComponents(deltaTime);\r\n            this.onTick(time);\r\n\r\n        }, 1000);\r\n    }\r\n\r\n    stop() {\r\n        clearInterval(this.intervalId);\r\n        this.isActive = false;\r\n        const time = this.getTimeComponents(0);\r\n        this.onTick(time);\r\n    }\r\n\r\n    /*\r\n   * - Принимает время в миллисекундах\r\n   * - Высчитывает сколько в них вмещается часов/минут/секунд\r\n   * - Возвращает обьект со свойствами hours, mins, secs\r\n   * - Адская копипаста со стека 💩\r\n   */\r\n\r\n    getTimeComponents(time) {\r\n    const hours = this.pad(Math.floor((time % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)));\r\n    const mins = this.pad(Math.floor((time % (1000 * 60 * 60)) / (1000 * 60)));\r\n    const secs = this.pad(Math.floor((time % (1000 * 60)) / 1000));\r\n\r\n    return { hours, mins, secs };\r\n    }\r\n\r\n    /*\r\n   * Принимает число, приводит к строке и добавляет в начало 0 если число меньше 2-х знаков\r\n    */\r\n    pad(value) {\r\n    return String(value).padStart(2, '0');\r\n    }\r\n}\r\n\r\nconst timer = new Timer({\r\n    onTick: updateClockface,\r\n});\r\n\r\nrefs.openBtn.addEventListener('click', () => {\r\n    timer.start();\r\n})\r\n\r\nrefs.closeBtn.addEventListener('click', () => {\r\n    timer.stop();\r\n})\r\n\r\nfunction updateClockface({ hours, mins, secs }) {\r\n    refs.clockface.textContent = `${hours}:${mins}:${secs}`;\r\n}"]}